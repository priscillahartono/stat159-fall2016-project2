install.packages('glmnet')
# install.packages('glmnet')
library(glmnet)
load("../../data/training-testing-sets.RData")
scaled_credit <- read.csv("../../data/Credit-scaled.csv")
x <- model.matrix(scaled_credit[,1:10])
y <- scaled_credit$Balance
x_train <- model.matrix(training_set[,1:10])
y_train <- training_set$Balance
x_test <- model.matrix(testing_set[,1:10])
y_test <- testing_set$Balance
#Train Set (10-fold cross-validation)
#-------------------------------------
#Ridge fitting function output models
grid <- 10^seq(10, -2, length = 100)
ridge_models <- cv.glmnet(x_train, y_train,
alpha = 0,
lambda = grid,
nfolds = 10,
standardize = FALSE,
intercept = FALSE)
#"Best" model
ridge_best_model <- ridge$lambda.min
#Generate visualization
png("images/ridge-models-plot.png")
plot(ridge_models, main = "Plot of Ridge Models")
dev.off()
#Test Sets
#--------------------------------
#Get predictions for test set
ridge_predictions <- predict(ridge_models, s = ridge_best_model, newx=x_test)
#Compute mean squared error
ridge_MSE <- mean((ridge_predictions - y_test)^2)
#Refit ridge regression on full data set
#-----------------------------------------
full_data_ridge <- (x, y,
alpha = 0,
lambda = ridge_best_model,
standardize = FALSE,
intercept = FALSE)
ridge_fulldata_coef <- coef(full_data_ridge)
#Save file
#--------------------------
save(ridge_best_model, ridge_predictions, ridge_MSE, full_data_ridge, ridge_fulldata_coef, file="../../data/ridge-regression.RData")
getwd
getwd()
scaled_credit <- read.csv("../../data/Credit-scaled.csv")
# install.packages('glmnet')
library(glmnet)
load("../../data/training-testing-sets.RData")
scaled_credit <- read.csv("../../data/scaled-credit.csv")
x <- model.matrix(scaled_credit[,1:10])
y <- scaled_credit$Balance
x_train <- model.matrix(training_set[,1:10])
y_train <- training_set$Balance
x_test <- model.matrix(testing_set[,1:10])
y_test <- testing_set$Balance
#Train Set (10-fold cross-validation)
#-------------------------------------
#Ridge fitting function output models
grid <- 10^seq(10, -2, length = 100)
ridge_models <- cv.glmnet(x_train, y_train,
alpha = 0,
lambda = grid,
nfolds = 10,
standardize = FALSE,
intercept = FALSE)
#"Best" model
ridge_best_model <- ridge$lambda.min
#Generate visualization
png("images/ridge-models-plot.png")
plot(ridge_models, main = "Plot of Ridge Models")
dev.off()
#Test Sets
#--------------------------------
#Get predictions for test set
ridge_predictions <- predict(ridge_models, s = ridge_best_model, newx=x_test)
#Compute mean squared error
ridge_MSE <- mean((ridge_predictions - y_test)^2)
#Refit ridge regression on full data set
#-----------------------------------------
full_data_ridge <- (x, y,
alpha = 0,
lambda = ridge_best_model,
standardize = FALSE,
intercept = FALSE)
ridge_fulldata_coef <- coef(full_data_ridge)
#Save file
#--------------------------
save(ridge_best_model, ridge_predictions, ridge_MSE, full_data_ridge, ridge_fulldata_coef, file="../../data/ridge-regression.RData")
# install.packages('glmnet')
library(glmnet)
scaled_credit <- read.csv('../../data/scaled-credit.csv')
load("../../data/training-testing-sets.RData")
scaled_credit = na.omit(scaled_credit)
training_set = na.omit(training_set)
testing_set = na.omit(testing_set)
x <- model.matrix(Balance ~ ., scaled_credit)[, -1]
y <- scaled_credit$Balance
x_training <- model.matrix(Balance ~ ., training_set)[, -1]
y_training <- training_set$Balance
x_testing <- model.matrix(Balance ~ ., testing_set)[, -1]
y_testing <- testing_set$Balance
#Train Set (10-fold cross-validation)
#-------------------------------------
#Ridge fitting function output models
set.seed(100)
grid <- 10^seq(10, -2, length = 100)
ridge_models <- cv.glmnet(x_training, y_training,
alpha = 0,
lambda = grid,
nfolds = 10,
standardize = FALSE,
intercept = FALSE)
#"Best" model
ridge_best_model <- ridge_models$lambda.min
#Generate visualization
png("images/ridge-models-plot.png")
plot(ridge_models, main = "Plot of Ridge Models")
dev.off()
#Test Sets
#--------------------------------
#Get predictions for test set
ridge_predictions <- predict(ridge_models, s = ridge_best_model, newx=x_testing)
#Compute mean squared error
ridge_MSE <- mean((ridge_predictions - y_testing)^2)
#Refit ridge regression on full data set
#-----------------------------------------
full_data_ridge <- (x, y,
alpha = 0,
lambda = ridge_best_model,
standardize = FALSE,
intercept = FALSE)
ridge_fulldata_coef <- coef(full_data_ridge)
#Save file
#--------------------------
save(ridge_best_model, ridge_predictions, ridge_MSE, full_data_ridge, ridge_fulldata_coef, file="../../data/ridge-regression.RData")
# install.packages('glmnet')
library(glmnet)
scaled_credit <- read.csv('../../data/scaled-credit.csv')
load("../../data/training-testing-sets.RData")
scaled_credit = na.omit(scaled_credit)
training_set = na.omit(training_set)
testing_set = na.omit(testing_set)
x <- model.matrix(Balance ~ ., scaled_credit)[, -1]
y <- scaled_credit$Balance
x_training <- model.matrix(Balance ~ ., training_set)[, -1]
y_training <- training_set$Balance
x_testing <- model.matrix(Balance ~ ., testing_set)[, -1]
y_testing <- testing_set$Balance
#Train Set (10-fold cross-validation)
#-------------------------------------
#Ridge fitting function output models
set.seed(100)
grid <- 10^seq(10, -2, length = 100)
ridge_models <- cv.glmnet(x_training, y_training,
alpha = 0,
lambda = grid,
nfolds = 10,
standardize = FALSE,
intercept = FALSE)
#"Best" model
ridge_best_model <- ridge_models$lambda.min
#Generate visualization
png("../../images/ridge-models-plot.png")
plot(ridge_models, main = "Plot of Ridge Models")
dev.off()
#Test Sets
#--------------------------------
#Get predictions for test set
ridge_predictions <- predict(ridge_models, s = ridge_best_model, newx=x_testing)
#Compute mean squared error
ridge_MSE <- mean((ridge_predictions - y_testing)^2)
#Refit ridge regression on full data set
#-----------------------------------------
full_data_ridge <- cv.glmnet(x, y,
alpha = 0,
lambda = ridge_best_model,
standardize = FALSE,
intercept = FALSE)
ridge_fulldata_coef <- coef(full_data_ridge)
#Save file
#--------------------------
save(ridge_models, ridge_best_model, ridge_predictions, ridge_MSE, full_data_ridge, ridge_fulldata_coef, file="../../data/ridge-regression.RData")
# install.packages('glmnet')
library(glmnet)
scaled_credit <- read.csv('../../data/scaled-credit.csv')
load("../../data/training-testing-sets.RData")
scaled_credit = na.omit(scaled_credit)
training_set = na.omit(training_set)
testing_set = na.omit(testing_set)
x <- model.matrix(Balance ~ ., scaled_credit)[, -1]
y <- scaled_credit$Balance
x_training <- model.matrix(Balance ~ ., training_set)[, -1]
y_training <- training_set$Balance
x_testing <- model.matrix(Balance ~ ., testing_set)[, -1]
y_testing <- testing_set$Balance
#Train Set (10-fold cross-validation)
#-------------------------------------
#Ridge fitting function output models
set.seed(100)
grid <- 10^seq(10, -2, length = 100)
ridge_models <- cv.glmnet(x_training, y_training,
alpha = 0,
lambda = grid,
nfolds = 10,
standardize = FALSE,
intercept = FALSE)
#"Best" model
ridge_best_model <- ridge_models$lambda.min
#Generate visualization
png("../../images/ridge-models-plot.png")
plot(ridge_models, main = "Plot of Ridge Models")
dev.off()
#Test Sets
#--------------------------------
#Get predictions for test set
ridge_predictions <- predict(ridge_models, s = ridge_best_model, newx=x_testing)
#Compute mean squared error
ridge_MSE <- mean((ridge_predictions - y_testing)^2)
#Refit ridge regression on full data set
#-----------------------------------------
full_data_ridge <- glmnet(x, y,
alpha = 0,
lambda = ridge_best_model,
standardize = FALSE,
intercept = FALSE)
ridge_fulldata_coef <- coef(full_data_ridge)
#Save file
#--------------------------
save(ridge_models, ridge_best_model, ridge_predictions, ridge_MSE, full_data_ridge, ridge_fulldata_coef, file="../../data/ridge-regression.RData")
install.packages('pls')
library(pls)
scaled_credit <- read.csv('../../data/scaled-credit.csv')
load("../../data/training-testing-sets.RData")
scaled_credit = na.omit(scaled_credit)
training_set = na.omit(training_set)
testing_set = na.omit(testing_set)
x <- model.matrix(Balance ~ ., scaled_credit)[, -1]
y <- scaled_credit$Balance
x_training <- model.matrix(Balance ~ ., training_set)[, -1]
y_training <- training_set$Balance
x_testing <- model.matrix(Balance ~ ., testing_set)[, -1]
y_testing <- testing_set$Balance
set.seed(100)
pcr_models <- pcr(y_training~x_training, scale=TRUE, validation="CV")
pcr_models$validation$PRESS
which.min(pcr_models$validation$PRESS)
min(pcr_models$validation$PRESS)
summary(pcr_models)
pcr_models$validation$PRESS
library(pls)
scaled_credit <- read.csv('../../data/scaled-credit.csv')
load("../../data/training-testing-sets.RData")
scaled_credit = na.omit(scaled_credit)
training_set = na.omit(training_set)
testing_set = na.omit(testing_set)
x <- model.matrix(Balance ~ ., scaled_credit)[, -1]
y <- scaled_credit$Balance
x_training <- model.matrix(Balance ~ ., training_set)[, -1]
y_training <- training_set$Balance
x_testing <- model.matrix(Balance ~ ., testing_set)[, -1]
y_testing <- testing_set$Balance
#Train Set (10-fold cross-validation)
#-------------------------------------
#PCR fitting function output models
set.seed(100)
pcr_models <- pcr(y_training~x_training, scale=TRUE, validation="CV")
summary(pcr_models)
#"Best" fit model
pcr_best_model <- pcr_models$validation$PRESS
#smallest cross-validation occurs for component
pcr_best_model1 <- which.min(pcr_models$validation$PRESS)
#with the value of
pcr_best_model2 <- min(pcr_models$validation$PRESS)
#Generate visualization
png("../../images/pcr-models-plot.png")
validationplot(pcr_models, val.type = "MSEP", main = "Cross-alidation Errors for PCR")
dev.off()
#Test Set
#--------------------------------
#Get predictions for test set
pcr_predictions <- predict(pcr_models, s = pcr_best_model, newx=x_testing)
#Compute mean squared error
pcr_MSE <- mean((pcr_predictions - y_testing)^2)
pcr_models$validation$PRESS
a <- pcr_models$validation$PRESS
which(a == min(a))
which.min(pcr_models$validation$PRESS)
pcr_fulldata_coef <- coef(full_data_pcr)
full_data_pcr <- pcr(y~x, validation="CV", scale=FALSE, ncomp=pcr_best_model1)
pcr_fulldata_coef <- coef(full_data_pcr)
pcr_fulldata_coef
pcr(y~x, validation="CV", scale=FALSE, ncomp=pcr_best_model1)
pcr(y~x, validation="CV", scale=FALSE, ncomp=pcr_best_model1)
pcr_best_model1 <- which.min(pcr_models$validation$PRESS)
pcr(y~x, validation="CV", scale=FALSE, ncomp=pcr_best_model1)
pcr_best_model1 <- which.min(pcr_models$validation$PRESS)
full_data_pcr <- pcr(y~x, validation="CV", scale=FALSE, ncomp=pcr_best_model1)
full_data_pcr
coef(full_data_pcr)
full_data_pcr1 <- pcr(y~x, validation="CV", scale=FALSE, ncomp=pcr_best_model1)
full_data_pcr1 <- pcr(y~x, scale=FALSE, ncomp=pcr_best_model1)
coef(full_data_pcr1)
library(pls)
scaled_credit <- read.csv('../../data/scaled-credit.csv')
load("../../data/training-testing-sets.RData")
scaled_credit = na.omit(scaled_credit)
training_set = na.omit(training_set)
testing_set = na.omit(testing_set)
x <- model.matrix(Balance ~ ., scaled_credit)[, -1]
y <- scaled_credit$Balance
x_training <- model.matrix(Balance ~ ., training_set)[, -1]
y_training <- training_set$Balance
x_testing <- model.matrix(Balance ~ ., testing_set)[, -1]
y_testing <- testing_set$Balance
#Train Set (10-fold cross-validation)
#-------------------------------------
#PCR fitting function output models
set.seed(100)
pcr_models <- pcr(y_training~x_training, scale=TRUE, validation="CV")
summary(pcr_models)
#"Best" fit model
pcr_best_model <- pcr_models$validation$PRESS
#smallest cross-validation occurs for component
pcr_best_model1 <- which.min(pcr_models$validation$PRESS)
#Generate visualization
png("../../images/pcr-models-plot.png")
validationplot(pcr_models, val.type = "MSEP", main = "Cross-alidation Errors for PCR")
dev.off()
#Test Set
#--------------------------------
#Get predictions for test set
pcr_predictions <- predict(pcr_models, s = pcr_best_model, newx=x_testing)
#Compute mean squared error
pcr_MSE <- mean((pcr_predictions - y_testing)^2)
#Refit PCR regression on full data set
#-----------------------------------------
full_data_pcr <- pcr(y~x, validation="CV", scale=FALSE, ncomp=pcr_best_model1)
#official coefficient estimates
pcr_fulldata_coef <- coef(full_data_pcr)
#Save file to RData
#-------------------
save(pcr_models, pcr_best_model1, pcr_predictions, pcr_MSE, full_data_pcr, pcr_fulldata_coef, file="../../data/principal-components-regression.RData")
full_data_pcr <- pcr(y~x, scale=FALSE, ncomp=pcr_best_model1)
library(pls)
scaled_credit <- read.csv('../../data/scaled-credit.csv')
load("../../data/training-testing-sets.RData")
scaled_credit = na.omit(scaled_credit)
training_set = na.omit(training_set)
testing_set = na.omit(testing_set)
x <- model.matrix(Balance ~ ., scaled_credit)[, -1]
y <- scaled_credit$Balance
x_training <- model.matrix(Balance ~ ., training_set)[, -1]
y_training <- training_set$Balance
x_testing <- model.matrix(Balance ~ ., testing_set)[, -1]
y_testing <- testing_set$Balance
#Train Set (10-fold cross-validation)
#-------------------------------------
#PCR fitting function output models
set.seed(100)
pcr_models <- pcr(y_training~x_training, scale=TRUE, validation="CV")
#summary of PCR models
sum_pcr <- summary(pcr_models)
#"Best" fit model
pcr_best_model <- pcr_models$validation$PRESS
#smallest cross-validation occurs for component
pcr_best_model1 <- which.min(pcr_models$validation$PRESS)
#Generate visualization
#-------------------------------------
png("../../images/pcr-models-plot.png")
validationplot(pcr_models, val.type = "MSEP", main = "Cross-alidation Errors for PCR")
dev.off()
#Test Set
#--------------------------------
#Get predictions for test set
pcr_predictions <- predict(pcr_models, s = pcr_best_model, newx=x_testing)
#Compute mean squared error
pcr_MSE <- mean((pcr_predictions - y_testing)^2)
#Refit PCR regression on full data set
#-----------------------------------------
full_data_pcr <- pcr(y~x, scale=FALSE, ncomp=pcr_best_model1)
#official coefficient estimates
pcr_fulldata_coef <- coef(full_data_pcr)
#Save file to RData
#-------------------
save(pcr_models, pcr_best_model1, pcr_predictions, pcr_MSE, full_data_pcr, pcr_fulldata_coef, file="../../data/principal-components-regression.RData")
